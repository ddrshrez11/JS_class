{"version":3,"sources":["TodoApp/NotesDisp.js","TodoApp/Home.js","TodoApp/UpdateNote.js","Routes.js","App.js","reportWebVitals.js","index.js"],"names":["NotesDisp","props","noteList","getSavedNotes","eng_month","console","log","history","useHistory","getUserReadableDate","date","readableDate","Date","getDate","getMonth","getFullYear","getHours","getMinutes","TableContainer","Table","stickyheader","TableHead","TableRow","TableCell","align","style","minWidth","TableBody","map","noteItem","index","hover","NoteText","created_date","Button","onClick","push","type","deleteNote","Home","useState","note","setNote","noteDel","setDel","MY_NOTE","noteText","localStorage","getItem","JSON","parse","AppBar","position","Toolbar","textAlign","margin","onSubmit","event","setItem","stringify","display","justifyContent","alignItems","TextField","placeholder","multiline","rows","rowsMax","variant","name","label","onChange","target","value","color","marginLeft","i","slice","concat","length","UpdateNote","params","useParams","id","location","state","updated","setUpdated","noteDate","newNoteList","defaultValue","to","Routes","basename","path","exact","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.66c2e79a.chunk.js","sourcesContent":["import { Button, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core'\r\n//import { Dialog, DialogActions, DialogContent, DialogTitle} from '@material-ui/core'\r\nimport React from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nexport default function NotesDisp(props) {\r\n    let noteList = props.getSavedNotes()\r\n    let eng_month=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\r\n    console.log(noteList)\r\n    let history = useHistory();\r\n\r\n    function getUserReadableDate(date) {\r\n        let readableDate=new Date(date);\r\n       // 11 NOv 2019 2:30\r\n        return readableDate.getDate()+' '+eng_month[readableDate.getMonth()]\r\n        +' '+readableDate.getFullYear()+' '+readableDate.getHours()+':'\r\n        +readableDate.getMinutes();\r\n    }\r\n\r\n    // const [open,setopen] = useState(false);\r\n    // const [deleteVar,setDelete] = useState(false);\r\n\r\n    // function handleClickOpen(event,index){\r\n    //     setopen(true);\r\n\r\n    //     function deleteSelect() {\r\n    //         //if (deleteVar) {\r\n    //             props.deleteNote(index)\r\n    //             setDelete(false)\r\n    //             setopen(false)\r\n    //        // }\r\n    //     }\r\n    // }\r\n    // function handleClose(){\r\n    //     setopen(false);\r\n    // }\r\n\r\n    // function handleDelete(){\r\n    //     setDelete(true);\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            {/* <div>\r\n                <Dialog\r\n                    open={open}\r\n                    onClose={handleClose}>\r\n                        <DialogTitle id='alert-dialog-title'>\r\n                            {'Delete Confirmation'}\r\n                        </DialogTitle>\r\n\r\n                        <DialogContent id=\"alert-dialog-description\">\r\n                            Are you sure you want to detele this note?\r\n                        </DialogContent>\r\n\r\n                        <DialogActions>\r\n                            <Button onclick={handleClose} color='secondary' autofocus>\r\n                                Disagree\r\n                            </Button>\r\n                            <Button onclick={handleClickOpen.deleteSelect} color='primary'>\r\n                                Agree\r\n                            </Button>\r\n                        </DialogActions>\r\n                </Dialog>\r\n            </div> */}\r\n            \r\n            <TableContainer>\r\n                <Table stickyheader='true'> \r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell\r\n                                key='id'\r\n                                align=\"center\"\r\n                                style={{ minWidth:50 }}>\r\n                                ID\r\n                            </TableCell>\r\n                            <TableCell\r\n                                key='note'\r\n                                style={{ minWidth:300 }}\r\n                                align=\"center\">\r\n                                Notes\r\n                            </TableCell>\r\n                            <TableCell\r\n                                key='created_date'\r\n                                style={{ minWidth:150 }}\r\n                                align=\"center\">\r\n                                Created Date\r\n                            </TableCell>\r\n                            <TableCell\r\n                                key='actions'\r\n                                style={{ minWidth:100 }}\r\n                                align=\"center\">\r\n                                Actions\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n\r\n                    {noteList.map((noteItem, index) => \r\n                        <TableRow hover>\r\n                            <TableCell\r\n                                key='id'\r\n                                align=\"center\">\r\n                                {index+1}\r\n                            </TableCell>\r\n                            <TableCell\r\n                                key='note'\r\n                                align=\"left\">\r\n                                {noteItem.NoteText}\r\n                            </TableCell>\r\n                            <TableCell\r\n                            key='created_date'\r\n                            align=\"center\">\r\n                                {getUserReadableDate(noteItem.created_date)}\r\n                            </TableCell>\r\n                            <TableCell\r\n                                key='actions'\r\n                                align=\"center\">\r\n                                <Button onClick={() => history.push('update/'+(index+1), {noteList:noteList})}>Update</Button><br/>\r\n                                <Button type='reset' onClick={() => {props.deleteNote(index);noteList=props.getSavedNotes()} /*handleClickOpen(index)*/}>Delete</Button>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AppBar, Button, TextField, Toolbar } from '@material-ui/core'\r\nimport NotesDisp from './NotesDisp'\r\n//import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport default function Home() {\r\n    const [note,setNote] = useState({})\r\n    const [noteDel,setDel] = useState(false)\r\n    let MY_NOTE='_my_note'\r\n    let noteText = '';\r\n    let noteList=getSavedNotes()?getSavedNotes():[]\r\n\r\n    function addNote(){\r\n        note['NoteText']=noteText;\r\n        note['created_date']=new Date();\r\n        setNote(note)\r\n        noteList=getSavedNotes()\r\n        noteList.push(note);\r\n        localStorage.setItem(MY_NOTE,JSON.stringify(noteList))\r\n    }\r\n\r\n    function getSavedNotes(){\r\n        let noteList=localStorage.getItem(MY_NOTE);\r\n        console.log(noteList)\r\n        return JSON.parse(noteList);\r\n    }\r\n\r\n    function deleteNote(index){\r\n        //delete noteList[index];\r\n        setDel(true)\r\n        let i = index\r\n        noteList = noteList.slice(0, i).concat(noteList.slice(i + 1, noteList.length));\r\n        localStorage.setItem(MY_NOTE,JSON.stringify(noteList))\r\n        console.log('delete '+index)\r\n        //noteList=getSavedNotes()?getSavedNotes():[]\r\n    }\r\n\r\n\r\n    function handleChange(event){\r\n        noteText = event.target.value;\r\n    }\r\n\r\n    function handleSubmit(event){\r\n        addNote();\r\n        noteList=getSavedNotes()?getSavedNotes():[]\r\n        console.log(note)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position='static'>\r\n                <Toolbar>\r\n                    <h1>TODO List</h1>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <div style={{ textAlign:'center', margin:50 }}>\r\n                <form \r\n                    onSubmit={handleSubmit}\r\n                    style={{ display: 'flex',  justifyContent: 'center',  alignItems: 'center' }}>\r\n\r\n                    <TextField\r\n                    placeholder=\"Enter Note\"\r\n                    multiline\r\n                    rows={2}\r\n                    rowsMax={4}\r\n                    variant='filled'\r\n                    name='NoteText'\r\n                    label=\"New Note\"\r\n                    onChange={handleChange}\r\n                    />\r\n                    <Button\r\n                        variant='contained'\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        style={{ marginLeft:20 }}>\r\n                        Add Note\r\n                    </Button>\r\n                </form>\r\n            </div>\r\n\r\n            <NotesDisp getSavedNotes={getSavedNotes} deleteNote={deleteNote} noteDel={noteDel} setDel={setDel}/>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Redirect, useHistory, useParams } from 'react-router-dom'\r\nimport { AppBar, Button, TextField, Toolbar } from '@material-ui/core'\r\n\r\n\r\nexport default function UpdateNote() {\r\n    let MY_NOTE='_my_note'\r\n    let history = useHistory()\r\n    let params = useParams()\r\n    let index = params.id-1\r\n    let noteList= history.location.state.noteList;\r\n    let noteText=noteList[index].NoteText\r\n    const [ updated,setUpdated]=useState(false)\r\n    var noteDate = noteList[index].created_date\r\n\r\n    //console.log(noteList[index].NoteText)\r\n    function handleUpdate(event){\r\n        let noteItem={'NoteText':noteText, 'created_date':noteDate}\r\n        let newNoteList= noteList.slice(0,index).concat(noteItem,noteList.slice(index+1))\r\n        //noteList.splice(index,1, noteItem)\r\n        console.log(noteItem)\r\n        localStorage.setItem(MY_NOTE,JSON.stringify(newNoteList))\r\n        setUpdated(true)\r\n        //return <Redirect to ='/'/>\r\n    }\r\n\r\n    function handleChange(event){\r\n        noteText = event.target.value\r\n        console.log(noteText)\r\n    }\r\n    return (\r\n        <div>\r\n            <AppBar position='static'>\r\n                <Toolbar>\r\n                    <h1>TODO List</h1>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <div style={{ textAlign:'center', margin:50 }}>\r\n                <h1>Update Note</h1>\r\n                <form \r\n                    onSubmit={handleUpdate}\r\n                    style={{ display: 'flex',  justifyContent: 'center',  alignItems: 'center' }}\r\n                >\r\n                    <TextField\r\n                        placeholder=\"Enter Note\"\r\n                        multiline\r\n                        rows={2}\r\n                        rowsMax={4}\r\n                        variant='filled'\r\n                        name='NoteText'\r\n                        label=\"Edit Note\"\r\n                        onChange={handleChange}\r\n                        defaultValue= {noteList[index].NoteText}\r\n                    />\r\n\r\n                    <Button\r\n                        variant='contained'\r\n                        color=\"primary\"\r\n                        style={{ marginLeft:20 }}\r\n                        type=\"submit\"\r\n                    >\r\n                        Update Note\r\n                    </Button>\r\n                </form>\r\n                {(updated)?<Redirect to=\"/\"/>:'' }\r\n            </div>\r\n            {/* index starts from 0 */}\r\n            {params.id - 1 }\r\n        </div>\r\n    )\r\n}","import React, { Component } from 'react'\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\nimport Home from './TodoApp/Home'\r\nimport UpdateNote from './TodoApp/UpdateNote'\r\n\r\nexport default class Routes extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Router basename=\"/JS_class/assignment3\">\r\n                    <Switch>\r\n                        <Route path = '/'  exact>\r\n                            <Home />\r\n                        </Route>\r\n                        <Route path = '/update/:id' >\r\n                            <UpdateNote />\r\n                        </Route>\r\n                    </Switch>\r\n                </Router>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import './App.css';\nimport Routes from './Routes'\n\nfunction App() {\n  return (\n    <Routes />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}